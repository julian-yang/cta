events {

}

http {
  error_log /etc/nginx/error_log.log warn;
  client_max_body_size 20m;
  
  proxy_cache_path /etc/nginx/cache keys_zone=one:500m max_size=1000m;
 
  upstream cta {
    server cta:80;
	}


  upstream anki-sync-server {
    server anki-sync-server:27701;
	}

  server {
    listen 80;
    server_name _;
    return 301 https://$host$request_uri;
  }

  server {

    listen 443 ssl;
    server_name julianyang.org;
    proxy_cache one;
    proxy_cache_key $request_method$request_uri;
    proxy_cache_min_uses 1;
    proxy_cache_methods GET;
    proxy_cache_valid 200 1y;
    
    location / {
      proxy_pass http://cta;
      # rewrite ^/home(.*)$ $1 break;
        proxy_redirect     off;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Host $server_name;
    }

    location /cta {
      proxy_pass http://cta;
      rewrite ^/cta(.*) /$1  break;
    }

    location /anki-web {
      # we can do this because docker automatically generates DNS entry 
      # to the container name, e.g. http://mycontainername:8000
      # https://docs.docker.com/compose/networking/
      # https://www.digitalocean.com/community/questions/what-value-should-i-use-for-nginx-proxy_pass-running-in-docker
      proxy_pass http://anki-sync-server;
      rewrite ^/anki-web(.*)$ /$1 break;
    }

		

    # To generate certs: run:  sudo certbot certonly --standalone -d julianyang.org
    ssl_certificate /etc/letsencrypt/live/julianyang.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/julianyang.org/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
  }
}
